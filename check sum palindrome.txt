Given a number, reverse it and add it to itself unless it becomes a palindrome or return -1 if the number of iterations becomes more than 5. Return that palindrome number if it becomes a palindrome else returns -1.

Examples :

Input: n = 23
Output: 55 
Explanation: reverse(23) = 32,then 32+23 = 55 which is a palindrome. 
Input: n = 73
Output: 121
Explanation: reverse(73) = 37,then 37+73 = 110 which is not a palindrome, again reverse(110)= 011, then 110+11 = 121 which is a palindrome.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 104


code in java:

class Solution {
    static long isSumPalindrome(long n) {
        int iterations = 0;
        
        while (iterations < 5) {
            if (isp(n)) { // Check if n is already a palindrome
                return n;
            }
            
            long reversed = re(n);
            long sum = n + reversed;
            
            if (isp(sum)) {
                return sum;
            }
            
            n = sum;
            iterations++;
        }
        
        return -1; // If no palindrome found within 5 iterations
    }
    
    static boolean isp(long n) {
        String s = Long.toString(n);
        int left = 0;
        int right = s.length() - 1;
        
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
   
    static long re(long n) {
        long rev = 0;
        
        while (n != 0) {
            rev = rev * 10 + n % 10;
            n = n / 10;
        }
        
        return rev;
    }
}
